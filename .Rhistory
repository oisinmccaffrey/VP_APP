omim2gene <- dyplyr::rename(omim2gene, omim2gene$`Approved Gene Symbol (HGNC)` == HGNC)
library(dplyr)
omim2gene <- dyplyr::rename(omim2gene, omim2gene$`Approved Gene Symbol (HGNC)` == HGNC)
dplyr::rename
omim2gene <- dplyr::rename(omim2gene, omim2gene$`Approved Gene Symbol (HGNC)` == HGNC)
omim2gene <- dplyr::rename(omim2gene,  HGNC = omim2gene$`Approved Gene Symbol (HGNC)`)
omim2gene <- dplyr::rename(omim2gene,  HGNC = `Approved Gene Symbol (HGNC)`)
omim2gene
omim2gene <- omim2gene %>% drop_na(HGNC)
omim2gene
vcf_master
ens2symbol <- function(mat){
if(all(grepl(pattern="^ENSG", rownames(mat)))){
mart = useMart(biomart = "ensembl", dataset = "hsapiens_gene_ensembl", archive=FALSE)
mat <- as.data.frame(mat)
mat$ensembl_gene_id_version <- rownames(mat)
info <- getBM(attributes=c("ensembl_gene_id","external_gene_name"),
filters = c("ensembl_gene_id"),
values = mat$ensembl_gene_id,
mart = mart,
useCache=FALSE)
tmp <- merge(mat, info, by="ensembl_gene_id")
tmp$external_gene_name <- make.names(tmp$external_gene_name, unique = T)
rownames(tmp) <- tmp$external_gene_name
tmp <- subset(tmp, select=-c(ensembl_gene_id, external_gene_name))
return(tmp)
}else{
return(mat)
}
}
ens2symbol()
ens2symbol <- function(mat){
if(all(grepl(pattern="^ENSG", rownames(mat)))){
mart = useMart(biomart = "ensembl", dataset = "hsapiens_gene_ensembl", archive=FALSE)
mat <- as.data.frame(mat)
mat$ensembl_gene_id_version <- rownames(mat)
info <- getBM(attributes=c("ensembl_gene_id","external_gene_name"),
filters = c("ensembl_gene_id"),
values = mat$ensembl_gene_id,
mart = mart,
useCache=FALSE)
tmp <- merge(mat, info, by="ensembl_gene_id")
tmp$external_gene_name <- make.names(tmp$external_gene_name, unique = T)
rownames(tmp) <- tmp$external_gene_name
tmp <- subset(tmp, select=-c(ensembl_gene_id, external_gene_name))
return(tmp)
}else{
return(mat)
}
}
mat
ens2symbol
install.packages("biomaRt)")
BiocManager::install("biomaRt")
library(biomaRt)
library(biomaRt)
ens2symbol <- function(mat){
if(all(grepl(pattern="^ENSG", rownames(mat)))){
mart = useMart(biomart = "ensembl", dataset = "hsapiens_gene_ensembl", archive=FALSE)
mat <- as.data.frame(mat)
mat$ensembl_gene_id_version <- rownames(mat)
info <- getBM(attributes=c("ensembl_gene_id","external_gene_name"),
filters = c("ensembl_gene_id"),
values = mat$ensembl_gene_id,
mart = mart,
useCache=FALSE)
tmp <- merge(mat, info, by="ensembl_gene_id")
tmp$external_gene_name <- make.names(tmp$external_gene_name, unique = T)
rownames(tmp) <- tmp$external_gene_name
tmp <- subset(tmp, select=-c(ensembl_gene_id, external_gene_name))
return(tmp)
}else{
return(mat)
}
}
ens2symbol
ens2symbol()
ens2symbol <- function(mat){
if(all(grepl(pattern="^ENSG", rownames(mat)))){
mart = useMart(biomart = "ensembl", dataset = "hsapiens_gene_ensembl", archive=FALSE)
mat <- as.data.frame(mat)
mat$ensembl_gene_id_version <- rownames(mat)
info <- getBM(attributes=c("ensembl_gene_id","external_gene_name"),
filters = c("ensembl_gene_id"),
values = mat$ensembl_gene_id,
mart = mart,
useCache=FALSE)
tmp <- merge(mat, info, by="ensembl_gene_id")
tmp$external_gene_name <- make.names(tmp$external_gene_name, unique = T)
rownames(tmp) <- tmp$external_gene_name
tmp <- subset(tmp, select=-c(ensembl_gene_id, external_gene_name))
return(tmp)
}else{
return(mat)
}
}
mat
mart <- useDataset("hsapiens_gene_ensembl", useMart("ensembl"))
genes <- vcf_master$Gene
G_list <- getBM(filters= "ensembl_gene_id", attributes= c("ensembl_gene_id","hgnc_symbol"),values=genes,mart= mart)
merge(df,G_list,by.x="gene",by.y="ensembl_gene_id")
library(biomaRt)
mart <- useDataset("hsapiens_gene_ensembl", useMart("ensembl"))
genes <- vcf_master$Gene
G_list <- getBM(filters= "ensembl_gene_id", attributes= c("ensembl_gene_id","hgnc_symbol"),values=genes,mart= mart)
merge(df,G_list,by.x="gene",by.y="ensembl_gene_id")
library(biomaRt)
## read in file with ENSEMBL Gene IDs (with version)
## Realistically this vector will come from your VCF file
ens_file <- vcf_master$Gene
## set up the biomart "MART" object to query their database
mart = useMart(biomart = "ensembl", dataset = "hsapiens_gene_ensembl", host="https://www.ensembl.org", archive=FALSE)
## now use BM to query their database, save it to a dataframe
## attributes: what we want to pull from their DB
## I always include our key value (ensembl gene id version), so we can merge what we pull
## back to our query. you will see this below. you can run listAttributes(mart) to see them all
## filters: means it is using the values we supply via 'values' to filter the results of attributes
## values: our input query
info <- getBM(attributes=c("ensembl_gene_id_version", "external_gene_name"),
filters=c("ensembl_gene_id_version"),
values=ens_file,
mart=mart,
useCache=F)
## look at info DF, only one query was returned. not sure why, maybe try stripping the version number and try again yourself, using "ensembl_gene_id" in place of "ensembl_gene_id_version"
## but now you have your ENSG -> GENE ID in a 2 column dataframe you can use this to query / convert your ENSG IDs
info
library(biomaRt)
## read in file with ENSEMBL Gene IDs (with version)
## Realistically this vector will come from your VCF file
ens_file <- read.table("foo.txt")
## set up the biomart "MART" object to query their database
mart = useMart(biomart = "ensembl", dataset = "hsapiens_gene_ensembl", host="https://www.ensembl.org", archive=FALSE)
## now use BM to query their database, save it to a dataframe
## attributes: what we want to pull from their DB
## I always include our key value (ensembl gene id version), so we can merge what we pull
## back to our query. you will see this below. you can run listAttributes(mart) to see them all
## filters: means it is using the values we supply via 'values' to filter the results of attributes
## values: our input query
info <- getBM(attributes=c("ensembl_gene_id_version", "external_gene_name"),
filters=c("ensembl_gene_id_version"),
values=ens_file$V1,
mart=mart,
useCache=F)
## look at info DF, only one query was returned. not sure why, maybe try stripping the version number and try again yourself, using "ensembl_gene_id" in place of "ensembl_gene_id_version"
## but now you have your ENSG -> GENE ID in a 2 column dataframe you can use this to query / convert your ENSG IDs
info
library(biomaRt)
## read in file with ENSEMBL Gene IDs (with version)
## Realistically this vector will come from your VCF file
ens_file <- read.table("foo.txt")
## set up the biomart "MART" object to query their database
mart = useMart(biomart = "ensembl", dataset = "hsapiens_gene_ensembl", host="https://www.ensembl.org", archive=FALSE)
## now use BM to query their database, save it to a dataframe
## attributes: what we want to pull from their DB
## I always include our key value (ensembl gene id version), so we can merge what we pull
## back to our query. you will see this below. you can run listAttributes(mart) to see them all
## filters: means it is using the values we supply via 'values' to filter the results of attributes
## values: our input query
info <- getBM(attributes=c("ensembl_gene_id", "external_gene_name"),
filters=c("ensembl_gene_id"),
values=ens_file$V1,
mart=mart,
useCache=F)
## look at info DF, only one query was returned. not sure why, maybe try stripping the version number and try again yourself, using "ensembl_gene_id" in place of "ensembl_gene_id_version"
## but now you have your ENSG -> GENE ID in a 2 column dataframe you can use this to query / convert your ENSG IDs
info
library(biomaRt)
## read in file with ENSEMBL Gene IDs (with version)
## Realistically this vector will come from your VCF file
ens_file <- read.table("foo.txt")
## set up the biomart "MART" object to query their database
mart = useMart(biomart = "ensembl", dataset = "hsapiens_gene_ensembl", host="https://www.ensembl.org", archive=FALSE)
## now use BM to query their database, save it to a dataframe
## attributes: what we want to pull from their DB
## I always include our key value (ensembl gene id version), so we can merge what we pull
## back to our query. you will see this below. you can run listAttributes(mart) to see them all
## filters: means it is using the values we supply via 'values' to filter the results of attributes
## values: our input query
info <- getBM(attributes=c("ensembl_gene_id_version", "external_gene_name"),
filters=c("ensembl_gene_id_version"),
values=ens_file$V1,
mart=mart,
useCache=F)
## look at info DF, only one query was returned. not sure why, maybe try stripping the version number and try again yourself, using "ensembl_gene_id" in place of "ensembl_gene_id_version"
## but now you have your ENSG -> GENE ID in a 2 column dataframe you can use this to query / convert your ENSG IDs
info
library(biomaRt)
mart <- useDataset("hsapiens_gene_ensembl", useMart("ensembl"))
genes <- vcf_master$Gene
G_list <- getBM(filters= "ensembl_gene_id", attributes= c("ensembl_gene_id","hgnc_symbol"),values=genes,mart= mart)
G_list
G_list
library(biomaRt)
mart <- useDataset("hsapiens_gene_ensembl", useMart("ensembl"))
genes <- vcf_master$Gene
G_list <- getBM(filters= "ensembl_gene_id", attributes= c("ensembl_gene_id","external_gene_name"),values=genes,mart= mart)
G_list
library(biomaRt)
mart <- useDataset("hsapiens_gene_ensembl", useMart("ensembl"))
genes <- vcf_master$Gene
G_list <- getBM(filters= "ensembl_gene_id", attributes= c("ensembl_gene_id","hgnc_symbol"),values=genes,mart= mart)
vcf_master
omim2gene
omim2gene
vcf_master
runApp('Desktop/R_Shiny_Summer')
runApp('Desktop/R_Shiny_Summer')
runApp('Desktop/R_Shiny_Summer')
runApp('Desktop/R_Shiny_Summer')
library(biomaRt)
mart <- useDataset("hsapiens_gene_ensembl", useMart("ensembl"))
genes <- vcf_master$Gene
G_list <- getBM(filters= "ensembl_gene_id", attributes= c("ensembl_gene_id","hgnc_symbol","mim_morbid_accession", "mim_morbid_description"),values=genes,mart= mart)
G_list
G_list
G_list$mim_morbid_description
G_list
G_list
G_list$mim_morbid_description
G_list$mim_morbid_description
G_list
data <- read.table("omim_to_ensembl.tsv.gz", header=F, stringsAsFactors=F, sep="\t")
colnames(data) <- c('omim', 'type', 'entrez_gene_id', 'hgnc_symbol', 'ensembl_gene_id')
library("biomaRt")
ensembl <- useMart("ensembl",dataset="hsapiens_gene_ensembl")
filters <- listFilters(ensembl)
#these are the filters we can use
#to limit our biomaRt query
head(filters)
shiny::runApp('Desktop/R_Shiny_Summer')
omim2gene
omim2gene
omim2gene
vcf_master
vcf_master_Berg <- vcf_master
vcf_master_Berg
vcf_master_Berg <- dplyr::rename(vcf_master_Berg, Symbol = HGNC)
vcf_master_Berg <- dplyr::rename(vcf_master_Berg, HGNC = Symbol)
vcf_master_Berg
omim2gene
merge(vcf_master_Berg, omim2gene[, c("HGNC", "MIM Number")], by="HGNC")
vcf_master_OMIM_CODES <- merge(vcf_master_Berg, omim2gene[, c("HGNC", "MIM Number")], by="HGNC")
vcf_master_OMIM_CODES
vcf_master_OMIM_CODES <- merge(vcf_master_Berg, omim2gene[, c("HGNC", "MIM Number")], by="HGNC", all.x=TRUE)
vcf_master_OMIM_CODES
runApp('Desktop/R_Shiny_Summer')
runApp('Desktop/R_Shiny_Summer')
vcf_master_OMIM_CODES
vcf_master_OMIM_CODES <- dplyr::rename(vcf_master_OMIM_CODES, `MIM Number` = OMIM)
vcf_master_OMIM_CODES <- dplyr::rename(vcf_master_OMIM_CODES, OMIM = MIM NUMBER)
vcf_master_OMIM_CODES <- dplyr::rename(vcf_master_OMIM_CODES, OMIM = `MIM NUMBER`)
vcf_master_OMIM_CODES <- dplyr::rename(vcf_master_OMIM_CODES, OMIM = `MIM Number`)
vcf_master_OMIM_CODES
runApp('Desktop/R_Shiny_Summer')
runApp('Desktop/R_Shiny_Summer')
runApp('Desktop/R_Shiny_Summer')
runApp('Desktop/R_Shiny_Summer')
runApp('Desktop/R_Shiny_Summer')
runApp('Desktop/R_Shiny_Summer')
runApp('Desktop/R_Shiny_Summer')
runApp('Desktop/R_Shiny_Summer')
runApp('Desktop/R_Shiny_Summer')
runApp('Desktop/R_Shiny_Summer')
runApp('Desktop/R_Shiny_Summer')
runApp('Desktop/R_Shiny_Summer')
runApp('Desktop/R_Shiny_Summer')
runApp('Desktop/R_Shiny_Summer')
runApp('Desktop/R_Shiny_Summer')
runApp('Desktop/R_Shiny_Summer')
runApp('Desktop/R_Shiny_Summer')
runApp('Desktop/R_Shiny_Summer')
runApp('Desktop/R_Shiny_Summer')
runApp('Desktop/R_Shiny_Summer')
runApp('Desktop/R_Shiny_Summer')
runApp('Desktop/R_Shiny_Summer')
runApp('Desktop/R_Shiny_Summer')
runApp('Desktop/R_Shiny_Summer')
runApp('Desktop/R_Shiny_Summer')
runApp('Desktop/R_Shiny_Summer')
runApp('Desktop/R_Shiny_Summer')
runApp('Desktop/R_Shiny_Summer')
runApp('Desktop/R_Shiny_Summer')
runApp('Desktop/R_Shiny_Summer')
runApp('Desktop/R_Shiny_Summer')
shiny::runApp('Desktop/R_Shiny_Summer')
vcf_master_OMIM_CODES
genemap2 <- vroom("genemap2.txt")
genemap2
omim2gene
genemap2
genemap2 <- vroom("genemap2.txt")
genemap2
genemap2 <- vroom("genemap2.txt", spec())
genemap2 <- vroom("genemap2.txt", spec())
genemap2 <- vroom("genemap2.txt")
genemap2 <- vroom("genemap2.txt", col_names = TRUE)
genemap2
genemap2 <- vroom("genemap2.txt")
genemap2
genemap2
genemap2 <- dplyr::rename(genemap2, OMIM = `MIM Number`)
genemap2
vcf_master_Berg
vcf_master_OMIM_CODES
vcf_master_PHENOTYPES <- merge(vcf_master_OMIM_CODES, genemap2[, c("OMIM", "Phenotypes")], by="OMIM", all.x=TRUE)
vcf_master_PHENOTYPES
vcf_master_OMIM_AND_PHENO <- merge(vcf_master_OMIM_CODES, genemap2[, c("OMIM", "Phenotypes")], by="OMIM", all.x=TRUE)
vcf_master_OMIM_AND_PHENO
vcf_master_OMIM_AND_PHENO <- merge(vcf_master_OMIM_CODES, genemap2[, c("OMIM", "Phenotypes")], by="OMIM")
vcf_master_OMIM_AND_PHENO
vcf_master_OMIM_AND_PHENO <- merge(vcf_master_OMIM_CODES, genemap2[, c("OMIM", "Phenotypes")], by="OMIM", all.x=TRUE)
vcf_master_OMIM_AND_PHENO
vcf_master_OMIM_AND_PHENO
vcf_master_OMIM_CODES
runApp('Desktop/R_Shiny_Summer')
runApp('Desktop/R_Shiny_Summer')
genemap2
vcf_master_OMIM_AND_PHENO <- merge(vcf_master_OMIM_CODES, genemap2[, c("Phenotypes", "OMIM")], by="Phenotypes", all.x=TRUE)
vcf_master_OMIM_AND_PHENO <- merge(vcf_master_OMIM_CODES, genemap2[, c("OMIM", "Phenotypes")], by="OMIM", all.x=TRUE)
vcf_master_OMIM_AND_PHENO
vcf_master_OMIM_AND_PHENO <- merge(vcf_master_OMIM_CODES, genemap2[, c("OMIM", "Phenotypes")], by="OMIM", all.y=TRUE)
vcf_master_OMIM_AND_PHENO
vcf_master_OMIM_AND_PHENO <- merge(vcf_master_OMIM_CODES, genemap2[, c("OMIM", "Phenotypes")], by="OMIM")
vcf_master_OMIM_AND_PHENO <- merge(vcf_master_OMIM_CODES, genemap2[, c("OMIM", "Phenotypes")], by="OMIM")
vcf_master_OMIM_AND_PHENO
vcf_master_OMIM_AND_PHENO <- merge(vcf_master_OMIM_CODES, genemap2[, c("OMIM", "Phenotypes")], by="OMIM", all.x=TRUE)
vcf_master_OMIM_AND_PHENO
genemap2 <- genemap2 %>% drop_na(OMIM)
genemap2 <- genemap2 %>% drop_na(OMIM)
genemap2
genemap2 <- genemap2 %>% drop_na(OMIM)
genemap2 <- genemap2 %>% drop_na(Phenotypes)
genemap2
vcf_master_OMIM_AND_PHENO <- merge(vcf_master_OMIM_CODES, genemap2[, c("OMIM", "Phenotypes")], by="OMIM", all.x=TRUE)
genemap2
vcf_master_OMIM_AND_PHENO
morbidmap <- vroom("morbidmap.txt")
morbidmap
morbidmap <- dplyr::rename(morbidmap, OMIM = `MIM Number`)
morbidmap <- morbidmap %>% drop_na(OMIM)
morbidmap <- morbidmap %>% drop_na(Phenotype)
morbidmap
vcf_master_OMIM_AND_MORBID <- merge(vcf_master_OMIM_CODES, morbidmap[, c("OMIM", "Phenotype")], by="OMIM", all.x=TRUE)
vcf_master_OMIM_AND_MORBID
unique(vcf_master_OMIM_AND_MORBID)
vcf_master_OMIM_AND_MORBID %>% distinct()
hello <- vroom("7_Allergy_Immunology_Infectious.vcf")
hello <- read.delim("7_Allergy_Immunology_Infectious.vcf")
hello
hello <- read.delim("9_Allergy_Immunology_Infectious.vcf")
hello
hello
vcf_master_OMIM_AND_MORBID
vcf_master_OMIM_AND_PHENO
PHENOTYPES_WithMaster <- merge(vcf_master_OMIM_AND_MORBID, hello[, c("HGNC", "Panel")], by="HGNC", all.x=TRUE)
PHENOTYPES_WithMaster <- merge(vcf_master_OMIM_AND_MORBID, hello[, c("HGNC", "Panel")], by="HGNC", all.x=TRUE)
PHENOTYPES_WithMaster
vcf_master_OMIM_AND_PHENO
PHENOTYPES_WithMaster <- merge(vcf_master_OMIM_AND_PHENO, hello[, c("HGNC", "Panel")], by="HGNC", all.x=TRUE)
PHENOTYPES_WithMaster
unique(hello)
hello
hello <- unique(hello)
PHENOTYPES_WithMaster <- merge(vcf_master_OMIM_AND_PHENO, hello[, c("HGNC", "Panel")], by="HGNC", all.x=TRUE)
PHENOTYPES_WithMaster
hello2 <- read.delim("8_Audiologic_Otolaryngologic.vcf")
hello2
panels
panels <- read.delim("PANELS")
panels
panels[2000]
panels
unique(panels)
unique(panels) -> panels
PHENOTYPES_WithMaster <- merge(vcf_master_OMIM_AND_PHENO, panels[, c("HGNC", "Panel")], by="HGNC", all.x=TRUE)
PHENOTYPES_WithMaster
panels <- read.delim("PANELS")
unique(panels) -> panels
panels
PHENOTYPES_WithMaster <- merge(vcf_master_OMIM_AND_PHENO, panels[, c("HGNC", "Panel")], by="HGNC", all.x=TRUE)
PHENOTYPES_WithMaster
panels <- read.delim("PANELS")
panels
PHENOTYPES_WithMaster <- merge(vcf_master_OMIM_AND_PHENO, panels[, c("HGNC", "Panel")], by="HGNC", all.x=TRUE)
PHENOTYPES_WithMaster
PHENOTYPES_WithMaster <- merge(vcf_master_OMIM_AND_PHENO, panels[, c("HGNC", "Panel")], by="HGNC", all.x=TRUE)
PHENOTYPES_WithMaster <- unique(PHENOTYPES_WithMaster)
PHENOTYPES_WithMaster
panels <- read.delim("PANELS")
unique(panels) -> panels
panels
panels
unique(panels) -> panels
panels
PHENOTYPES_WithMaster <- merge(vcf_master_OMIM_AND_PHENO, panels[, c("HGNC", "Panel")], by="HGNC", all.x=TRUE)
PHENOTYPES_WithMaster
PHENOTYPES_WithMaster <- merge(vcf_master_OMIM_AND_PHENO, panels[, c("HGNC", "Panel")], by="HGNC", all.x=TRUE)
PHENOTYPES_WithMaster
panels <- read.delim("PANELS")
unique(panels) -> panels
panels
vcf_master_OMIM_AND_PHENO
PHENOTYPES_WithMaster <- merge(vcf_master_OMIM_AND_PHENO, panels[, c("HGNC", "Panel")], by="HGNC", all.x=TRUE)
PHENOTYPES_WithMaster
PHENOTYPES_WithMaster <- merge(vcf_master_OMIM_AND_PHENO, panels[, c("HGNC", "Panel")], by="HGNC", all.x=TRUE)
PHENOTYPES_WithMaster <- unique(PHENOTYPES_WithMaster)
PHENOTYPES_WithMaster
PHENOTYPES_WithMaster <- merge(vcf_master_OMIM_AND_PHENO, panels[, c("HGNC", "Panel")], by="HGNC", all.x=TRUE)
PHENOTYPES_WithMaster
PHENOTYPES_WithMaster <- merge(vcf_master_OMIM_AND_PHENO, panels[, c("HGNC", "Panel")], by="HGNC")
PHENOTYPES_WithMaster
PHENOTYPES_WithMaster <- merge(vcf_master_OMIM_AND_PHENO, panels[, c("HGNC", "Panel")], by="HGNC", all.x=TRUE)
PHENOTYPES_WithMaster
vcf_master_OMIM_AND_PHENO
PHENOTYPES_WithMaster <- merge(vcf_master_OMIM_AND_PHENO, panels[, c("HGNC", "Panel")], by="HGNC", all.x=TRUE)
PHENOTYPES_WithMaster
panels
shiny::runApp('Desktop/R_Shiny_Summer')
install.packages('rsconnect')
rsconnect::setAccountInfo(name='oisinmccaffrey',
token='0668001CD531A2686779629913EBB345',
secret='<SECRET>')
library(rsconnect)
rsconnect::setAccountInfo(name='oisinmccaffrey', token='0668001CD531A2686779629913EBB345', secret='9vWLjUt1G7LC2hkUjan0Iyb5Of5bLGvAR0IAvUb9')
pwd()
getwd()
rsconnect::deployApp('~Desktop/R_Shiny_Summer/app.R')
rsconnect::deployApp('/Users/oisinmccaffrey/Desktop/R_Shiny_Summer/app.R')
rsconnect::deployApp('Users/oisinmccaffrey/Desktop/R_Shiny_Summer/app.R')
rsconnect::deployApp('~/Desktop/R_Shiny_Summer/app.R')
rsconnect::deployApp(~/Desktop/R_Shiny_Summer/app.R)
rsconnect::deployApp(~Desktop/R_Shiny_Summer/app.R)
rsconnect::deployApp('Users/oisinmccaffrey/Desktop/R_Shiny_Summer')
rsconnect
rsconnect:deployApp
library(rsconnect)
rsconnect
rsconnect::deployApp('/Users/oisinmccaffrey/Desktop/R_Shiny_Summer')
rsconnect::deployApp('/Users/oisinmccaffrey/Desktop/R_Shiny_Summer/app.R')
rsconnect::deployApp('/Users/oisinmccaffrey/Desktop/R_Shiny_Summer/app.R')
rsconnect::deployApp('/Users/oisinmccaffrey/Desktop/Masters/Bergkamp/app.R')
rsconnect::deployApp('/Users/oisinmccaffrey/Desktop/Masters/Bergkamp')
rsconnect::deployApp('/Users/oisinmccaffrey/Desktop/Masters/Bergkamp')
runApp('Desktop/Masters/Bergkamp')
rsconnect::deployApp('/Users/oisinmccaffrey/Desktop/Masters/Bergkamp/app.R')
rsconnect::deployApp('/Users/oisinmccaffrey/Desktop/Masters/Bergkamp')
runApp('Desktop/Masters/Bergkamp')
rsconnect::deployApp('/Users/oisinmccaffrey/Desktop/Masters/Bergkamp')
runApp('Desktop/R_Shiny_Summer')
shiny::runApp('Desktop/R_Shiny_Summer')
runApp('Desktop/R_Shiny_Summer')
runApp('Desktop/R_Shiny_Summer')
runApp('Desktop/R_Shiny_Summer')
runApp('Desktop/R_Shiny_Summer')
shiny::runApp('Desktop/Running_VP/VP_APP')
runApp('Desktop/R_Shiny_Summer')
runApp('Desktop/R_Shiny_Summer')
runApp('Desktop/R_Shiny_Summer')
runApp('Desktop/R_Shiny_Summer')
shiny::runApp('Desktop/R_Shiny_Summer')
runApp('Desktop/R_Shiny_Summer')
runApp('Desktop/R_Shiny_Summer')
shiny::runApp('Desktop/R_Shiny_Summer')
runApp('Desktop/R_Shiny_Summer')
print(length("/Users/oisinmccaffrey/Desktop/R_Shiny_Summer/SRR.gavin_secondpass.vcf"))
runApp('Desktop/R_Shiny_Summer')
vcf_master
vcf_master
print(length(vcf_master$ID_)
print(length(vcf_master$ID_))
runApp('Desktop/R_Shiny_Summer')
runApp('Desktop/R_Shiny_Summer')
runApp('Desktop/R_Shiny_Summer')
runApp('Desktop/R_Shiny_Summer')
runApp('Desktop/R_Shiny_Summer')
runApp('Desktop/R_Shiny_Summer')
runApp('Desktop/R_Shiny_Summer')
runApp('Desktop/R_Shiny_Summer')
runApp('Desktop/R_Shiny_Summer')
runApp('Desktop/R_Shiny_Summer')
runApp('Desktop/R_Shiny_Summer')
runApp('Desktop/R_Shiny_Summer')
runApp('Desktop/R_Shiny_Summer')
runApp('Desktop/R_Shiny_Summer')
runApp('Desktop/R_Shiny_Summer')
runApp('Desktop/R_Shiny_Summer')
runApp('Desktop/R_Shiny_Summer')
runApp('Desktop/R_Shiny_Summer')
runApp('Desktop/R_Shiny_Summer')
runApp('Desktop/R_Shiny_Summer')
runApp('Desktop/R_Shiny_Summer')
runApp('Desktop/R_Shiny_Summer')
runApp('Desktop/R_Shiny_Summer')
runApp('Desktop/R_Shiny_Summer')
runApp('Desktop/R_Shiny_Summer')
runApp('Desktop/R_Shiny_Summer')
runApp('Desktop/R_Shiny_Summer')
runApp('Desktop/R_Shiny_Summer')
runApp('Desktop/R_Shiny_Summer')
runApp('Desktop/R_Shiny_Summer')
runApp('Desktop/R_Shiny_Summer')
runApp('Desktop/R_Shiny_Summer')
shiny::runApp('Desktop/R_Shiny_Summer')
getwd()
setwd("~/Desktop/Masters/R_Shiny_Summer")
shiny::runApp()
getwd()
setwd("~/Desktop/Masters/Bergkamp")
runApp()
runApp()
runApp()
runApp()
